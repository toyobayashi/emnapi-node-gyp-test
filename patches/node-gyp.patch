From fbea4c4c9a0643a91acbd5025a4d7053345db95d Mon Sep 17 00:00:00 2001
From: toyobayashi <lifenglin314@outlook.com>
Date: Sun, 28 Jan 2024 23:21:28 +0800
Subject: [PATCH 1/2] feat: `node-gyp build` with make generator on Windows

---
 lib/build.js     | 18 ++++++++++++------
 lib/configure.js | 14 ++++++++++++--
 2 files changed, 24 insertions(+), 8 deletions(-)

diff --git a/lib/build.js b/lib/build.js
index 6b8d84d3ed..07779f8df1 100644
--- a/lib/build.js
+++ b/lib/build.js
@@ -85,18 +85,24 @@ async function build (gyp, argv) {
   async function findSolutionFile () {
     const files = await glob('build/*.sln')
     if (files.length === 0) {
-      throw new Error('Could not find *.sln file. Did you run "configure"?')
+      if (require('fs').existsSync('build/Makefile') || (await glob('build/*.mk')).length !== 0) {
+        command = makeCommand
+        await doWhich(false)
+        return
+      } else {
+        throw new Error('Could not find *.sln file or Makefile. Did you run "configure"?')
+      }
     }
     guessedSolution = files[0]
     log.verbose('found first Solution file', guessedSolution)
-    await doWhich()
+    await doWhich(true)
   }
 
   /**
    * Uses node-which to locate the msbuild / make executable.
    */
 
-  async function doWhich () {
+  async function doWhich (win) {
     // On Windows use msbuild provided by node-gyp configure
     if (win) {
       if (!config.variables.msbuild_path) {
@@ -104,21 +110,21 @@ async function build (gyp, argv) {
       }
       command = config.variables.msbuild_path
       log.verbose('using MSBuild:', command)
-      await doBuild()
+      await doBuild(win)
       return
     }
 
     // First make sure we have the build command in the PATH
     const execPath = await which(command)
     log.verbose('`which` succeeded for `' + command + '`', execPath)
-    await doBuild()
+    await doBuild(win)
   }
 
   /**
    * Actually spawn the process and compile the module.
    */
 
-  async function doBuild () {
+  async function doBuild (win) {
     // Enable Verbose build
     const verbose = log.logger.isVisible('verbose')
     let j
diff --git a/lib/configure.js b/lib/configure.js
index 8da41a849d..3a39878c91 100644
--- a/lib/configure.js
+++ b/lib/configure.js
@@ -66,8 +66,18 @@ async function configure (gyp, argv) {
     log.verbose(
       'build dir', '"build" dir needed to be created?', isNew ? 'Yes' : 'No'
     )
-    const vsInfo = win ? await findVisualStudio(release.semver, gyp.opts['msvs-version']) : null
-    return createConfigFile(vsInfo)
+    if (win) {
+      let gypFormatIndex = argv.indexOf('-f')
+      if (gypFormatIndex === -1) {
+        gypFormatIndex = argv.indexOf('--format')
+      }
+      if (gypFormatIndex === -1 || !argv[gypFormatIndex + 1] || argv[gypFormatIndex + 1] === 'msvs') {
+        const vsInfo = await findVisualStudio(release.semver, gyp.opts['msvs-version'])
+        return createConfigFile(vsInfo)
+      }
+      return createConfigFile({})
+    }
+    return createConfigFile(null)
   }
 
   async function createConfigFile (vsInfo) {

From ff228bb4e4fe9a6f30962da34ab2ffc013663ac0 Mon Sep 17 00:00:00 2001
From: toyobayashi <lifenglin314@outlook.com>
Date: Sun, 28 Jan 2024 23:28:04 +0800
Subject: [PATCH 2/2] do not add symlinks to `%Path%`

---
 lib/build.js | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/lib/build.js b/lib/build.js
index 07779f8df1..fef817ea0a 100644
--- a/lib/build.js
+++ b/lib/build.js
@@ -102,48 +102,48 @@ async function build (gyp, argv) {
    * Uses node-which to locate the msbuild / make executable.
    */
 
-  async function doWhich (win) {
+  async function doWhich (msvs) {
     // On Windows use msbuild provided by node-gyp configure
-    if (win) {
+    if (msvs) {
       if (!config.variables.msbuild_path) {
         throw new Error('MSBuild is not set, please run `node-gyp configure`.')
       }
       command = config.variables.msbuild_path
       log.verbose('using MSBuild:', command)
-      await doBuild(win)
+      await doBuild(msvs)
       return
     }
 
     // First make sure we have the build command in the PATH
     const execPath = await which(command)
     log.verbose('`which` succeeded for `' + command + '`', execPath)
-    await doBuild(win)
+    await doBuild(msvs)
   }
 
   /**
    * Actually spawn the process and compile the module.
    */
 
-  async function doBuild (win) {
+  async function doBuild (msvs) {
     // Enable Verbose build
     const verbose = log.logger.isVisible('verbose')
     let j
 
-    if (!win && verbose) {
+    if (!msvs && verbose) {
       argv.push('V=1')
     }
 
-    if (win && !verbose) {
+    if (msvs && !verbose) {
       argv.push('/clp:Verbosity=minimal')
     }
 
-    if (win) {
+    if (msvs) {
       // Turn off the Microsoft logo on Windows
       argv.push('/nologo')
     }
 
     // Specify the build type, Release by default
-    if (win) {
+    if (msvs) {
       // Convert .gypi config target_arch to MSBuild /Platform
       // Since there are many ways to state '32-bit Intel', default to it.
       // N.B. msbuild's Condition string equality tests are case-insensitive.
@@ -179,7 +179,7 @@ async function build (gyp, argv) {
       }
     }
 
-    if (win) {
+    if (msvs) {
       // did the user specify their own .sln file?
       const hasSln = argv.some(function (arg) {
         return path.extname(arg) === '.sln'
